<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【导航】Cmder+WSL+docker+plex</title>
      <link href="/2019/09/17/dao-hang-cmder-wsl-docker-plex/"/>
      <url>/2019/09/17/dao-hang-cmder-wsl-docker-plex/</url>
      
        <content type="html"><![CDATA[<p>大好的中秋节，我为了一个更好的家庭影院，两个晚上全都折进去了，悉数无数的大坑，希望对大家有用。</p><p><strong>目的：</strong> 我的目的开始的时候非常单纯，我之前的plex搭在树莓派上，因为性能不太得行，毕竟树莓派上还跑这一堆乱七八糟的，也没钱买新的，就打算直接放在我玩游戏的电脑上得了，优点是性能给劲，缺点也很明显，毕竟不是一个服务器，总有关机的时候，但我想了想，首先我平时这台机子就不怎么关，其次是我也不是时时刻刻要看电影，看的时候大部分时间机器是开的，仿佛不怎么冲突。其实最主要的是我想折腾，没别的特殊理由，就是想折腾而已。</p><p>其实最简单的就是下载plex media server for Windows，但我觉得这样不够干净，也不够折腾，所以我觉得还是放在docker上比较好。开关方便，删除方便，跑在容器里也和我的主系统隔离的明明白白，玩特别吃资源的游戏说关就关，之前工作的时候也在docker上，比较熟悉和放心，但没想到我越走越远了。</p><p>我的心路历程如下：</p><ol><li>我想在WSL里面直接跑一个plexmediaserver，美滋滋</li><li>后来发现各种不行，这个放文章里细说，总之就想到了干脆折腾再多一点，在WSL里搞docker，docker里搞plex</li><li>后来的后来又发现不得行，具体后面文章细说，总之就是闹了个大乌龙，这里先卖个关子。</li><li>最后当然是为了美观上了Cmder，和主流程无关。</li></ol><p>现在回看，就四个字</p><p><strong>我太难了</strong></p><p>真的是各种作死各种踩坑，花了两个晚上终于全搞定了。</p><p><strong>这个页面是导航页面，请大家挑选观看，废话我都写在这个导航页里了，下面这些都是干货</strong></p><ul><li>WSL</li><li>在WSL里运行docker</li><li>docker安装plex以及设置</li><li>Cmder</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Cmder </tag>
            
            <tag> WSL </tag>
            
            <tag> docker </tag>
            
            <tag> plex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Step</title>
      <link href="/2019/09/15/the-first-step/"/>
      <url>/2019/09/15/the-first-step/</url>
      
        <content type="html"><![CDATA[<p><em>This is the first test page</em></p><p><strong>test</strong></p><h2 id="二级标题中文"><a href="#二级标题中文" class="headerlink" title="二级标题中文"></a>二级标题中文</h2><h5 id="五级标题中文"><a href="#五级标题中文" class="headerlink" title="五级标题中文"></a>五级标题中文</h5><p>Normal text</p><hr><p><del>over</del></p><p>记录：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35668237</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/15/hello-world/"/>
      <url>/2019/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
