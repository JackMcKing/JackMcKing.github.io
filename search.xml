<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WSL 采坑集锦</title>
      <link href="/2019/09/17/wsl-cai-keng-ji-jin/"/>
      <url>/2019/09/17/wsl-cai-keng-ji-jin/</url>
      
        <content type="html"><![CDATA[<p>说着就来到第一关，折腾WSL，也就是Windows Subsystem Linux</p><p>我现在算明白了，这就是看起来很美好，吃起来就那样的玩意。</p><p>关于它的介绍网上一大堆，官网也说得很全面，目前这个东西的状况还很复杂，所以我觉得还是直接说理想状态也就是最终追求：微软想做一个bash shell，直接和Windows NT内核交流，目前这个项目叫Windows Subsystem Linux。因为做出一个和内核交流的shell，从某种意义上来说就是做出了一个新的system，所以也就好理解这个“子系统”了。</p><hr><p>开搞。</p><p><strong>注意，搞WSL需要Windows10</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>首先，打开“启动或关闭Windows功能”，这个点一下开始菜单，输入功能或者Feature就出来了，把“适用于LInux的Windows子系统”打上勾，确定后要是让你重启你就重启。<strong>这里有个问题，我不知道家庭版的Windows有没有这个选项，我上网查好像是没有，我手头都是专业版的Win 10没法亲自查证，如果家庭版的同学有这样的问题，打开power shell，执行以下命令代替这一步</strong></p><pre class=" language-powershell"><code class="language-powershell">Enable<span class="token operator">-</span>WindowsOptionalFeature <span class="token operator">-</span>Online <span class="token operator">-</span>FeatureName Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux</code></pre></li><li><p>打开微软商店，搜索Ubuntu，会出来两个，18.04 和16.04，两个都是LTS，看你喜好了。<strong>除非是Win10家庭版，否则这一步和第一步没有先后顺序，也可以同时进行。</strong></p></li><li><p>下载好后打开，让你输入新的Linux用户名和密码，然后就直接进入系统了。</p></li></ol><h2 id="坑们"><a href="#坑们" class="headerlink" title="坑们"></a>坑们</h2><h3 id="目录问题"><a href="#目录问题" class="headerlink" title="目录问题"></a>目录问题</h3><p>我的目录在哪，其实这是两个问题，一个是我如何在Windows上访问WSL的目录，另一个是我怎么在WSL里访问Windows的目录。</p><p>那么Windows访问WSL：</p><p>打开开始，输入%APPDATA%，在AppData的</p><pre><code>./Local/Packages/CanonicalGroupLimited.Ubuntu16.04onWindows......./LocalState/rootfs/</code></pre><p>下面。</p><p>WSL访问Windows，其实和Cygwin是一样的，在</p><pre><code>/mnt/c #C盘   或者   /mnt/d #D盘</code></pre><p>以此类推</p><h3 id="大名鼎鼎systemctl"><a href="#大名鼎鼎systemctl" class="headerlink" title="大名鼎鼎systemctl"></a>大名鼎鼎systemctl</h3><p>我开始的时候直接把plexmediaserver安装在了WSL里，安装在树莓派的时候plex是自动启动了的，除非报错，但我在WSL安装完成后并没有启动，ps找不到，于是我用systemctl去查看status，结果报错“Failed to connect to bus: No such file or directory”,我查了一下，是因为微软还没做这个systemctl，但是Ubuntu16以后systemctl就开始代替service了啊，希望微软加把劲吧。</p><p>我还装了一个Nginx，也当然没办法用systemctl启动，只能用service，或者直接进入 /etc/init.d 手动启动了。但这个plexmediaserver我还真没搞明白怎么手动启动，回头一定搞一搞，这个坑我挖在这了。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>这个就太难受了，拿python举例子，如果你下载的Ubuntu16.04，那么自带一个python 2.7和3.5，Ubuntu18也有相应的版本，但是如果你Windows上本身就带着平时用的版本怎么办呢，比如我的Windows上有一个Python3.7，目录在 c/Python37/python.exe 。首先你其实是可以输入绝对路径直接呼出来的，例如</p><pre><code>/mnt/c/Python37/python.exe -V</code></pre><p>输出：Python 3.7.3</p><p>所以你可以把这个路径加在path后面放在~/.bashrc里，</p><pre><code>export PATH="/mnt/c/Python37/python.exe:$PATH"</code></pre><p>或者暴力一点直接设一个alias给它，稍微有些不检点但起码有效。</p><pre><code>alias p37='/mnt/c/Python37/python.exe'</code></pre><p>这样做是因为我不想再WSL里再来一套python环境，太冗余了。其他的东西也一样。</p><h3 id="ps-netstat-lsof和Windows不相通"><a href="#ps-netstat-lsof和Windows不相通" class="headerlink" title="ps, netstat, lsof和Windows不相通"></a>ps, netstat, lsof和Windows不相通</h3><p>按道理说，WSL的目的是融合，但这个真的有些分离了，我反正试着ps了好几个windows的进程都找不到，这可以理解，也很好理解，但在我看来是和WSL的初衷是分裂的。同样，netstat和lsof也监控不到Windows的端口活动，比如我在WSL里面开一个hexo的服务，是可以看到的，但是我Windows上flask的5000端口就看不到了。</p><p>但是！你在WSL里ifconfig一下，在Windows里ipconfig一下，发现他们是同一个IP，那按理说融合的很好啊，在WSl里用telnet也能连接到Windows上的服务，也许这就是沙盒的魅力吧 ε=ε=ε=┏(゜ロ゜;)┛</p><p>我自己写的都迷惑了，这让写脚本这个事很难受，比如要写一个监控进程干一点事的脚本，还要注意这个进程必须要运行在WSL里，监控网络的脚本也一样。我相信这会让很多到这里的同学被增加很多时间成本，所以这个真的做得不太好。</p><p>我能想到的最好的使用情况就是你心买了一台机子，从头到尾环境，服务，都是运行在WSL下的，但WSL又各种各样的限制和bug（前一阵ifconfig坏了），真的很无奈。老实讲，有很多时候真的想干脆开Hyper-V上一台虚拟机搞事情了。</p><h2 id="尝试在WSL里安装Plex-Media-Server"><a href="#尝试在WSL里安装Plex-Media-Server" class="headerlink" title="尝试在WSL里安装Plex Media Server"></a>尝试在WSL里安装Plex Media Server</h2><p>上面提到了安装plex的事，最后失败告终，但这套方法是不变的。</p><ol><li><p>首先去官网上找到适合自己的版本，右键复制链接</p></li><li><p>wget下来到随意一个目录，是一个deb文件，例如我是Ubuntu 64位</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://downloads.plex.tv/plex-media-server-new/1.16.5.1554-1e5ff713d/debian/plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb</code></pre></li><li><p>cd到有你下好的deb文件的目录，安装，这里的 -i 是install的意思。</p><pre><code>sudo dpkg -i plexmediaserver_1.16.5.1554-1e5ff713d_amd64.deb</code></pre></li></ol><ol start="4"><li><p>没有意外是自动运行的，利用systemctl查看</p><pre><code>systemctl status plexmediaserver</code></pre><p>运行/重启/关闭 就把上面这个命令的status换成start/restart/stop。</p><p><strong>那么我们也是这步卡住了，也挖了坑，以后深作研究补上，这次折腾已经冲着docker的路上一去不复返了。</strong></p></li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>我就说一下它的优缺点吧。这些都是我自己总结的，我的主观使用感受。</p><h3 id="WSL的优点："><a href="#WSL的优点：" class="headerlink" title="WSL的优点："></a>WSL的优点：</h3><ol><li>运行快，是真的快，微软当时吹的水其实被完成的算是挺好的了，里面的命令直接和Windows NT内核进行交流，快，比cygwin肉眼可见的快，尤其用一些性能不怎么好的笔记本。</li><li>可以写很多bash的脚本放在里面跑了，以前的很多脚本直接嫁接在Windows上跑，还是很爽的，比如定期更新bt-tracker list。</li><li>里面的命令算是挺齐的了，日常命令大部分都有，可以说这个WSL完成度还是比较高，但也只是大部分日常命令，这个下面缺点会说，竟然还有很多关键的没有！</li></ol><h3 id="WSL的缺点："><a href="#WSL的缺点：" class="headerlink" title="WSL的缺点："></a>WSL的缺点：</h3><ol><li>显而易见的就是竟然还有很多关键的日常命令没有！众所周知，从Ubuntu16开始，systemctl就代替了service，service还有，但systemctl能干更多事情。这句话我是翻译的国外大神的，因为systemctl的事国外还发起了请愿，要求微软搞快点。</li><li>那就引发了我第二个问题，既然WSL直接和Windows NT内核交流，那是不是假如systemctl被加上的话，就需要更新Windows啊，这个对我目前的环境显然不是问题，但据我上班的经验，为了环境的稳定性，大家都不太愿意更新自己的系统，毕竟更新完少则半天多则好几天干不了活可是要出事情的。</li><li>这个东西真的做的挺好的了，值得鼓励，但终究还是有些四不像，你说它是个shell，看起来这是微软的终极目标，也是初衷，但现在看起来，真的还是有很大差距的，我举个例子，假如现在我的Windows上安装一个python 3.7， 我打开bash shell（WSL也可以通过开始菜单中的bash直接呼出来），那就并不能直接用上，这说明系统和shell脱离了，很尴尬，当然是可以用，只不过是把环境变量设置到 /mnt/c/xxxx 就好了，但好像多出了很多多余的成本啊。再者，按理想状态，我系统里开着chrome，我在bash shell里ps一下chrome，应该有的，但实则不然。</li><li>那系统和shell之间到底是分离了还是没分离，如果分离了，那虚拟机就搞定了，当然占用资源很多，但起码是完整的Linux，而不会因为微软还没做xx命令就不能用。所以它有一些藕断丝连的感觉，有了先天的优点，但也避免不了集合了分离和不分离的缺点，希望微软老哥搞快点，有朝一日达到理想状态，不过感觉不太靠谱啊，哈哈。你问我支持不支持，我肯定支持一个完美的直接和WNT交流的WSL啊。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【导航】Cmder+WSL+docker+plex</title>
      <link href="/2019/09/17/dao-hang-cmder-wsl-docker-plex/"/>
      <url>/2019/09/17/dao-hang-cmder-wsl-docker-plex/</url>
      
        <content type="html"><![CDATA[<p>大好的中秋节，我为了一个更好的家庭影院，两个晚上全都折进去了，悉数无数的大坑，希望对大家有用。</p><p><strong>目的：</strong> 我的目的开始的时候非常单纯，我之前的plex搭在树莓派上，因为性能不太得行，毕竟树莓派上还跑这一堆乱七八糟的，也没钱买新的，就打算直接放在我玩游戏的电脑上得了，优点是性能给劲，缺点也很明显，毕竟不是一个服务器，总有关机的时候，但我想了想，首先我平时这台机子就不怎么关，其次是我也不是时时刻刻要看电影，看的时候大部分时间机器是开的，仿佛不怎么冲突。其实最主要的是我想折腾，没别的特殊理由，就是想折腾而已。</p><p>其实最简单的就是下载plex media server for Windows，但我觉得这样不够干净，也不够折腾，所以我觉得还是放在docker上比较好。开关方便，删除方便，跑在容器里也和我的主系统隔离的明明白白，玩特别吃资源的游戏说关就关，之前工作的时候也在docker上，比较熟悉和放心，但没想到我越走越远了。</p><p>我的心路历程如下：</p><ol><li>我想在WSL里面直接跑一个plexmediaserver，美滋滋</li><li>后来发现各种不行，这个放文章里细说，总之就想到了干脆折腾再多一点，在WSL里搞docker，docker里搞plex</li><li>后来的后来又发现不得行，具体后面文章细说，总之就是闹了个大乌龙，这里先卖个关子。</li><li>最后当然是为了美观上了Cmder，和主流程无关。</li></ol><p>现在回看，就四个字</p><p><strong>我太难了</strong></p><p>真的是各种作死各种踩坑，花了两个晚上终于全搞定了。</p><p><strong>这个页面是导航页面，请大家挑选观看，废话我都写在这个导航页里了，下面这些都是干货</strong></p><ul><li><a href="https://jackmcking.github.io/2019/09/17/wsl-cai-keng-ji-jin/">WSL</a></li><li>在WSL里运行docker (敬请期待)</li><li>docker安装plex以及设置 (敬请期待)</li><li>Cmder (敬请期待)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Cmder </tag>
            
            <tag> WSL </tag>
            
            <tag> docker </tag>
            
            <tag> plex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Step</title>
      <link href="/2019/09/15/the-first-step/"/>
      <url>/2019/09/15/the-first-step/</url>
      
        <content type="html"><![CDATA[<p><em>This is the first test page</em></p><p><strong>test</strong></p><h2 id="二级标题中文"><a href="#二级标题中文" class="headerlink" title="二级标题中文"></a>二级标题中文</h2><h5 id="五级标题中文"><a href="#五级标题中文" class="headerlink" title="五级标题中文"></a>五级标题中文</h5><p>Normal text</p><hr><p><del>over</del></p><p>记录：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35668237</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/15/hello-world/"/>
      <url>/2019/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
